apiVersion: v1
kind: Namespace
metadata:
  name: ops-agent-dev
  labels:
    app: ops-agent
    owner: dev-team
    environment: development
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ops-agent-config
  namespace: ops-agent-dev
  labels:
    app: ops-agent
    environment: development
data:
  config.yaml: |
    # JWT 配置
    jwt:
      key: "${JWT_KEY}"
      expire: 24h  # 开发环境可以使用更长的token过期时间

    # 服务器配置
    server:
      port: 8080
      host: "0.0.0.0"

    # 日志配置
    log:
      level: "debug"  # 开发环境使用更详细的日志
      format: "text"  # 开发环境使用文本格式日志便于查看
      output: "stdout"

    # 性能统计配置
    perf:
      enabled: true
      reset_interval: 24h
---
# 开发环境的kubeconfig Secret
apiVersion: v1
kind: Secret
metadata:
  name: kubeconfig-secret
  namespace: ops-agent-dev
  labels:
    app: ops-agent
    environment: development
type: Opaque
data:
  config: |-
    # 开发环境kubeconfig的base64编码内容
    # 请使用以下命令获取并替换：
    # cat ~/.kube/config | base64 -w 0
    IyB5b3VyIGt1YmVjb25maWcgZmlsZSBjb250ZW50IGluIGJhc2U2NCBlbmNvZGluZw==
---
apiVersion: v1
kind: Secret
metadata:
  name: ops-agent-secret
  namespace: ops-agent-dev
  labels:
    app: ops-agent
    environment: development
type: Opaque
data:
  jwt-key: ZGV2ZWxvcG1lbnRfa2V5X25vdF9mb3JfcHJvZHVjdGlvbg== # 仅用于开发环境的密钥
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ops-agent
  namespace: ops-agent-dev
  labels:
    app: ops-agent
    environment: development
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: ops-agent-dev
  labels:
    app: ops-agent
    environment: development
rules:
- apiGroups: [""]
  resources: ["pods", "services", "nodes", "namespaces", "configmaps", "secrets", "persistentvolumes", "persistentvolumeclaims", "events"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "statefulsets", "daemonsets", "replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["batch"]
  resources: ["jobs", "cronjobs"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["networking.k8s.io"]
  resources: ["ingresses", "networkpolicies"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["storage.k8s.io"]
  resources: ["storageclasses"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ops-agent-dev
  labels:
    app: ops-agent
    environment: development
subjects:
- kind: ServiceAccount
  name: ops-agent
  namespace: ops-agent-dev
roleRef:
  kind: ClusterRole
  name: ops-agent-dev
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ops-agent
  namespace: ops-agent-dev
  labels:
    app: ops-agent
    component: api
    environment: development
  annotations:
    description: "OpsAgent开发环境 - 基于LLM的Kubernetes智能运维平台"
spec:
  replicas: 1  # 开发环境只需单副本
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: ops-agent
  template:
    metadata:
      labels:
        app: ops-agent
        environment: development
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: ops-agent
      terminationGracePeriodSeconds: 30
      containers:
      - name: ops-agent
        image: ninesun0318/opsagent:main
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        args:
        - server
        - --port=8080
        - --config=/app/configs/config.yaml
        env:
        - name: JWT_KEY
          valueFrom:
            secretKeyRef:
              name: ops-agent-secret
              key: jwt-key
        - name: TZ
          value: "Asia/Shanghai"
        - name: PYTHONPATH
          value: /app/k8s/python-cli/k8s-env/lib/python3.9/site-packages
        - name: ENV
          value: "development"
        - name: KUBECONFIG
          value: /root/.kube/config
        volumeMounts:
        - name: config-volume
          mountPath: /app/configs
        - name: kubeconfig-volume
          mountPath: /root/.kube
          readOnly: true
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        livenessProbe:
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 3
      volumes:
      - name: config-volume
        configMap:
          name: ops-agent-config
      - name: kubeconfig-volume
        secret:
          secretName: kubeconfig-secret
          items:
          - key: config
            path: config
---
apiVersion: v1
kind: Service
metadata:
  name: ops-agent
  namespace: ops-agent-dev
  labels:
    app: ops-agent
    environment: development
  annotations:
    description: "OpsAgent开发环境服务入口"
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app: ops-agent
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ops-agent
  namespace: ops-agent-dev
  labels:
    app: ops-agent
    environment: development
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"  # 开发环境可以不使用SSL
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    # 开发环境可以限制为办公网络IP
    nginx.ingress.kubernetes.io/whitelist-source-range: "192.168.1.0/24,127.0.0.1/32"
spec:
  ingressClassName: nginx
  rules:
  - host: ops-agent-dev.example.com  # 请替换为您的开发环境域名
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: ops-agent
            port:
              name: http 