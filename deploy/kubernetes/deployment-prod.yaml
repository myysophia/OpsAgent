apiVersion: v1
kind: Namespace
metadata:
  name: ops-agent
  labels:
    app: ops-agent
    owner: ops-team
    environment: production
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ops-agent-config
  namespace: ops-agent
  labels:
    app: ops-agent
    environment: production
data:
  config.yaml: |
    # JWT 配置
    jwt:
      key: "${JWT_KEY}"
      expire: 12h  # token 过期时间

    # 服务器配置
    server:
      port: 8080
      host: "0.0.0.0"

    # 日志配置
    log:
      level: "info"
      format: "json"
      output: "stdout"

    # 性能统计配置
    perf:
      enabled: true
      reset_interval: 24h
# ---
# # 添加kubeconfig Secret
# apiVersion: v1
# kind: Secret
# metadata:
#   name: kubeconfig-secret
#   namespace: ops-agent
#   labels:
#     app: ops-agent
#     environment: production
# type: Opaque
# data:
#   config: |-
#     # 这里填入base64编码的kubeconfig内容
#     # 请使用以下命令获取并替换：
#     # cat ~/.kube/config | base64 -w 0
#     IyB5b3VyIGt1YmVjb25maWcgZmlsZSBjb250ZW50IGluIGJhc2U2NCBlbmNvZGluZw==
---
apiVersion: v1
kind: Secret
metadata:
  name: ops-agent-secret
  namespace: ops-agent
  labels:
    app: ops-agent
    environment: production
type: Opaque
data:
  jwt-key: MTIzNDU2Cg==
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ops-agent
  namespace: ops-agent
  labels:
    app: ops-agent
    environment: production
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: ops-agent
  labels:
    app: ops-agent
    environment: production
rules:
- apiGroups: [""]
  resources: ["pods", "services", "nodes", "namespaces", "configmaps", "secrets", "persistentvolumes", "persistentvolumeclaims", "events"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "statefulsets", "daemonsets", "replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["batch"]
  resources: ["jobs", "cronjobs"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["networking.k8s.io"]
  resources: ["ingresses", "networkpolicies"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["storage.k8s.io"]
  resources: ["storageclasses"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["roles", "rolebindings", "clusterroles", "clusterrolebindings"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["policy"]
  resources: ["podsecuritypolicies"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["autoscaling"]
  resources: ["horizontalpodautoscalers"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ops-agent
  labels:
    app: ops-agent
    environment: production
subjects:
- kind: ServiceAccount
  name: ops-agent
  namespace: ops-agent
roleRef:
  kind: ClusterRole
  name: ops-agent
  apiGroup: rbac.authorization.k8s.io
---
# 定义PodDisruptionBudget以确保高可用性
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: ops-agent-pdb
  namespace: ops-agent
  labels:
    app: ops-agent
    environment: production
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: ops-agent
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ops-agent
  namespace: ops-agent
  labels:
    app: ops-agent
    component: api
    environment: production
  annotations:
    description: "OpsAgent - 基于LLM的Kubernetes智能运维平台"
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: ops-agent
  template:
    metadata:
      labels:
        app: ops-agent
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: ops-agent
      terminationGracePeriodSeconds: 60
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:  # 强制要求pod分布在不同节点
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - ops-agent
            topologyKey: kubernetes.io/hostname
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: node-role.kubernetes.io/worker
                operator: Exists
      containers:
      - name: ops-agent
        image: ninesun0318/opsagent:main
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        args:
        - server
        - --port=8080
        - --jwt-key="123456"
        env:
        - name: JWT_KEY
          valueFrom:
            secretKeyRef:
              name: ops-agent-secret
              key: jwt-key
        - name: TZ
          value: "Asia/Shanghai"
        - name: PYTHONPATH
          value: /app/k8s/python-cli/k8s-env/lib/python3.9/site-packages
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KUBECONFIG
          value: /root/.kube/config
        volumeMounts:
        - name: config-volume
          mountPath: /app/configs
        - name: kubeconfig-volume
          mountPath: /root/.kube
        - name: logs-volume
          mountPath: /app/logs
        resources:
          requests:
            cpu: 500m
            memory: 512Mi
          limits:
            cpu: 2000m
            memory: 2Gi
      volumes:
      - name: config-volume
        configMap:
          name: ops-agent-config
      - name: kubeconfig-volume
        secret:
          secretName: kubeconfig-secret
          items:
          - key: config
            path: config
      - name: logs-volume
        emptyDir: {}
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            app: ops-agent
---
apiVersion: v1
kind: Service
metadata:
  name: ops-agent
  namespace: ops-agent
  labels:
    app: ops-agent
    environment: production
  annotations:
    description: "OpsAgent服务入口"
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app: ops-agent